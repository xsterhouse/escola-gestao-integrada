
import { useState, useEffect } from 'react';
import { useNetworkStatus } from './useNetworkStatus';
import { syncService } from '@/services/syncService';
import { offlineStorage } from '@/services/offlineDb';
import { useToast } from '@/hooks/use-toast';

export const useSyncManager = () => {
  const [isSyncing, setIsSyncing] = useState(false);
  const [pendingCount, setPendingCount] = useState(0);
  const [lastSyncTime, setLastSyncTime] = useState<Date | null>(null);
  const { isOnline } = useNetworkStatus();
  const { toast } = useToast();

  useEffect(() => {
    updatePendingCount();
    
    // Carregar √∫ltima data de sincroniza√ß√£o do localStorage
    const savedLastSync = localStorage.getItem('lastSyncTime');
    if (savedLastSync) {
      setLastSyncTime(new Date(savedLastSync));
    }
  }, []);

  useEffect(() => {
    let timeoutId: NodeJS.Timeout;

    if (isOnline && pendingCount > 0) {
      // Auto-sync quando volta online (com delay para estabilizar)
      timeoutId = setTimeout(() => {
        console.log('üîÑ Iniciando sincroniza√ß√£o autom√°tica...');
        handleAutoSync();
      }, 3000);
    }

    // Listener para evento customizado de reconex√£o
    const handleConnectionRestored = () => {
      if (pendingCount > 0) {
        timeoutId = setTimeout(() => {
          handleAutoSync();
        }, 2000);
      }
    };

    window.addEventListener('connection-restored', handleConnectionRestored);

    return () => {
      if (timeoutId) clearTimeout(timeoutId);
      window.removeEventListener('connection-restored', handleConnectionRestored);
    };
  }, [isOnline, pendingCount]);

  const updatePendingCount = async () => {
    try {
      const queue = await offlineStorage.getSyncQueue();
      setPendingCount(queue.length);
      console.log(`üìä ${queue.length} itens pendentes para sincroniza√ß√£o`);
    } catch (error) {
      console.error('Erro ao atualizar contagem pendente:', error);
    }
  };

  const handleAutoSync = async () => {
    if (!isOnline || isSyncing) return;
    
    try {
      setIsSyncing(true);
      await syncService.syncPendingData();
      await updatePendingCount();
      setLastSyncTime(new Date());
      localStorage.setItem('lastSyncTime', new Date().toISOString());
      
      console.log('‚úÖ Sincroniza√ß√£o autom√°tica conclu√≠da');
    } catch (error) {
      console.error('‚ùå Erro na sincroniza√ß√£o autom√°tica:', error);
    } finally {
      setIsSyncing(false);
    }
  };

  const handleManualSync = async () => {
    if (!isOnline) {
      toast({
        title: "Sem conex√£o",
        description: "Conecte-se √† internet para sincronizar os dados.",
        variant: "destructive"
      });
      return;
    }

    if (isSyncing) {
      toast({
        title: "Sincroniza√ß√£o em andamento",
        description: "Aguarde a conclus√£o da sincroniza√ß√£o atual.",
        variant: "default"
      });
      return;
    }

    setIsSyncing(true);
    
    try {
      toast({
        title: "Sincronizando...",
        description: `${pendingCount} itens pendentes para sincroniza√ß√£o.`,
      });

      await syncService.syncPendingData();
      await updatePendingCount();
      const syncTime = new Date();
      setLastSyncTime(syncTime);
      localStorage.setItem('lastSyncTime', syncTime.toISOString());

      toast({
        title: "Sincroniza√ß√£o conclu√≠da",
        description: "Todos os dados foram sincronizados com sucesso.",
      });
    } catch (error) {
      console.error('Erro na sincroniza√ß√£o manual:', error);
      toast({
        title: "Erro na sincroniza√ß√£o",
        description: "Alguns dados podem n√£o ter sido sincronizados. Tente novamente.",
        variant: "destructive"
      });
    } finally {
      setIsSyncing(false);
    }
  };

  const addToQueue = async (type: string, data: any, action: string) => {
    try {
      await offlineStorage.addToSyncQueue(type, data, action);
      await updatePendingCount();
      
      console.log(`üìù Adicionado √† fila: ${type} - ${action}`);
      
      if (isOnline && !isSyncing) {
        // Se estiver online, tenta sincronizar ap√≥s um pequeno delay
        setTimeout(() => {
          handleAutoSync();
        }, 1500);
      }
    } catch (error) {
      console.error('Erro ao adicionar √† fila de sincroniza√ß√£o:', error);
      throw error;
    }
  };

  return {
    isSyncing,
    pendingCount,
    lastSyncTime,
    handleManualSync,
    addToQueue,
    updatePendingCount
  };
};
